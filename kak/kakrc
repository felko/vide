# interface

set-option global modelinefmt '%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}}'
set-option global startup_info_version 20250101
set-option global ui_options \
    terminal_assistant=clippy \
    terminal_status_on_top=false \
    terminal_set_title=false \
    terminal_enable_mouse=true \
    terminal_change_colors=true \
    terminal_padding_char=

colorscheme vide-light

add-highlighter global/ number-lines # -relative

# lsp setup

eval %sh{@kaklsp@ --kakoune -s $kak_session}
lsp-enable

set-option global lsp_diagnostic_line_error_sign ''
set-option global lsp_diagnostic_line_warning_sign ''
set-option global lsp_diagnostic_line_info_sign ''
set-option global lsp_diagnostic_line_hint_sign ''

# Faces used by inline diagnostics.
set-face global DiagnosticError   default,default,rgb:ba3b46+c
set-face global DiagnosticHint    default,default,rgb:306a88+c
set-face global DiagnosticInfo    default,default,rgb:20063b+c
set-face global DiagnosticWarning default,default,rgb:ff882d+c
# Faces used by inlay diagnostics.
set-face global InlayDiagnosticError   rgb:ba3b46,default+d
set-face global InlayDiagnosticHint    rgb:306a88,default+d
set-face global InlayDiagnosticInfo    rgb:20063b,default+d
set-face global InlayDiagnosticWarning rgb:ff882d,default+d
# Faces used by line flags
set-face global LineFlagError rgb:ba3b46,default
set-face global LineFlagHint rgb:306a88,default
set-face global LineFlagInfo rgb:20063b,default
set-face global LineFlagWarning rgb:ff882d,default
# Face for highlighting references.
set-face global Reference MatchingChar
set-face global ReferenceBind +u@Reference
# Face for inlay hints.
set-face global InlayHint rgb:306a88+d

# general options

set-option global tabstop 2
set-option global scrolloff 5,10
set-option global grepcmd "rg --follow --line-number --column"

# cycle through completion candidates with tab

hook global InsertCompletionShow .* %{
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
}

hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# general commands

define-command edit-or-buffer -params 0.. %{
   evaluate-commands %sh{
        if [ -n "$1" ]; then
            if [ -e "$2" ] || [ $2 -eq 0 ]; then
                for buf in "$kak_buflist"; do
                    if [ "$buf" == "$1" ]; then
                        echo buffer "$1"
                        exit
                    fi
                done
                echo edit "$1"
            else
                echo edit "$1" "$2"
            fi
        fi
   }
}

# user modes

declare-user-mode file
declare-user-mode buffer
declare-user-mode eval
declare-user-mode clipboard

map -docstring "file"      global user f       ': enter-user-mode file<ret>'
map -docstring "buffer"    global user b       ': enter-user-mode buffer<ret>'
map -docstring "eval"      global user e       ': enter-user-mode eval<ret>'
map -docstring "clipboard" global user c       ': enter-user-mode clipboard<ret>'
map -docstring "lsp"       global user l       ': enter-user-mode lsp<ret>'

map -docstring "dash"      global user <space> ': file-select<ret>'


## file

define-command -docstring 'Select a file to open' file-select %{
    evaluate-commands %sh{
        @zellij@ run --close-on-exit --floating --name select -- @selectFile@ $kak_session $kak_client "$kak_buffile"
    }
}

define-command -docstring 'Select a directory in which to cd' file-select-directory %{
    evaluate-commands %sh{
        @zellij@ run --close-on-exit --floating --name select -- @selectDirectory@ "$kak_buffile"
    }
}

map -docstring "select" global file f ': file-select<ret>'
map -docstring "cd" global file d ': file-select-directory<ret>'


## buffer

define-command -docstring 'Select a buffer to open' buffer-select %{
    evaluate-commands %sh{
        @zellij@ run --close-on-exit --floating --name select -- @selectBuffer@ $kak_session $kak_client $bufname
    }
}

map -docstring "select" global buffer b ': buffer-select<ret>'
map -docstring "delete" global buffer q ': delete-buffer<ret>'
map -docstring "scratch" global buffer s ': edit -scratch<ret>'
map -docstring "debug" global buffer d ': edit -debug *debug*<ret>'

map -docstring "delete buffer" global normal <c-w> ': delete-buffer<ret>'
map -docstring "delete buffer" global insert <c-w> ': delete-buffer<ret>'

## eval


define-command -docstring 'Evaluate kakscript' evaluate-kakscript  %{
    evaluate-commands -itersel %{
        evaluate-commands %val{selection}
    }
}

map -docstring 'kakscript' global eval k ': evaluate-kakscript<ret>'


## clipboard

declare-option str clipboard_copy_command "@copyCommand@"
declare-option str clipboard_paste_command "@pasteCommand@"

# hook global RegisterModified '"' %{ nop %sh{
#     printf %s "$kak_main_reg_dquote" | $kak_opt_clipboard_copy_command
# }}

define-command -override -docstring 'Yank selection to system clipboard' clipboard-yank %{
    execute-keys <a-|> %opt{clipboard_copy_command}<ret>
}

define-command -docstring 'Paste system clipboard before cursor' clipboard-paste-before-cursor %{
    execute-keys ! %opt{clipboard_paste_command}<ret>
}

define-command -docstring 'Paste system clipboard after cursor' clipboard-paste-after-cursor %{
    execute-keys <a-!> %opt{clipboard_paste_command}<ret>
}

define-command -docstring 'Cut selection into system clipboard' clipboard-cut %{
    execute-keys <a-!>
}

define-command -docstring 'Replace selection with system clipboard contents' clipboard-replace %{
    execute-keys <a-d>! %opt{clipboard_paste_command}<ret>
}

define-command -docstring 'Synchronize clipboard with system clipboard' clipboard-sync %{
    nop %sh{
        printf %s "$kak_main_reg_dquote" | $kak_opt_clipboard_copy_command
    }
}

map global clipboard y -docstring 'yank'                                ': clipboard-yank<ret>'
map global clipboard P -docstring 'paste before cursor'                 ': clipboard-paste-before-cursor<ret>'
map global clipboard p -docstring 'paste after cursor'                  ': clipboard-paste-after-cursor<ret>'
map global clipboard d -docstring 'cut'                                 ': clipboard-cut<ret>'
map global clipboard R -docstring 'replace'                             ': clipboard-replace<ret>'
map global clipboard s -docstring 'load dquote register into clipboard' ': clipboard-sync<ret>'
